#include"includes.h"
using namespace std;
dpp::cluster bot(BOT_TOKEN);

int main() {
    bot.on_log(dpp::utility::cout_logger());
    cout << dpp::colors::green;
 
    bot.on_slashcommand([](const dpp::slashcommand_t& event) {
        if (event.command.get_command_name() == "echo") {
            dpp::snowflake channel = event.command.get_channel().id;
            cout << "echo | ";
            if (bancheck(event.command.get_issuing_user().id)==true){
                std::string testovo = std::get<std::string>(event.get_parameter("text"));
                bot.message_create(dpp::message(channel, testovo));
                event.thinking(true);
                event.delete_original_response();
                cout << testovo;
            }else {
                event.reply(dpp::message("[ ! ] –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è"));
            }
            cout << " | " << event.command.get_issuing_user().username << endl; 
        }

        if (event.command.get_command_name() == "random"){
            double from = get<double>(event.get_parameter("–æ—Ç"));
            double to = get<double>(event.get_parameter("–¥–æ"));
            long int cfrom = from;
            long int cto = to;
            cout << "random | ";
            switch (bancheck(event.command.get_issuing_user().id)){
                case true:
                    event.thinking();
                    if (from > 0 && to > 0 && from < to){
                    srand(time(NULL));
                    long int raznica = to +1 - from;
                    long int random = rand() % raznica ;
                    long int randomi = from + random;
                    event.edit_original_response("–í–∞–º –≤—ã–ø–∞–ª–æ:" + to_string( randomi ));
                    cout << to_string(from) << "/" << to_string(to);
                    } else{
                        event.edit_original_response(dpp::message("–ß–∏—Å–ª–æ –æ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å < —á–∏—Å–ª–∞ –¥–æ –∏ –Ω–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ –Ω–µ —Ä–∞–≤–Ω–æ 0!"));
                        cout << "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ";
                    } break;
                
                case false:
                    event.reply(dpp::message("[ ! ] –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è"));
                    cout << "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ";
                    break;
            }
            cout << " | " << event.command.get_issuing_user().username << endl; 
         }

         if (event.command.get_command_name()=="calculate"){
            cout << "calculate | ";
            event.thinking();
            dpp::snowflake channel = event.command.get_channel().id;
            string primer = get<string>(event.get_parameter("–ø—Ä–∏–º–µ—Ä"));
            string term_cmd = "calc '" + primer + "' > r.txt && echo $? > status.txt";
            int sz =term_cmd.length();
            char* converted = new char[sz+1];
            strcpy(converted, term_cmd.c_str());
            system(converted);

            ifstream file("r.txt");
            string answer;
            getline(file, answer);
            
            switch(bancheck(event.command.get_issuing_user().id)){
                case true:
                    if (answer != "" && answer.length() <= 2000){
                        event.edit_original_response(primer + "=" + answer);
                        cout << primer;
                    }else{
                        if(answer.length()>2000){
                            dpp::message err2(channel, "[ ! ] –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>2000 —Å–∏–º–≤–æ–ª–æ–≤)");
                            bot.message_create(err2);
                        }else{
                            dpp::message err1(channel, "[ ! ] –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É");
                            bot.message_create(err1);
                         }
                        event.delete_original_response();
                    }
                    
                    break;
                case false:
                    event.edit_original_response(dpp::message("[ ! ] –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è"));
                    cout << "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ";
                    break;
            }
            cout << " | " << event.command.get_issuing_user().username << endl; 
         }

         if(event.command.get_command_name()=="info"){
            event.reply("> AbstractBot\n–°–æ–∑–¥–∞—Ç–µ–ª—å: AbstractDevs\n\n> –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ C++ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ D++\n\n> GitHub: \n> https://github.com/AbstractDevs70/JustABot-cpp");
            cout << "info | | " << event.command.get_issuing_user().username; 
         }

         if(event.command.get_command_name()=="about"){
            dpp::snowflake usrid = get<dpp::snowflake>(event.get_parameter("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"));
            dpp::user usr = event.command.get_resolved_user(usrid);
            dpp::message infor("> ## üî∞ –û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n> :globe_with_meridians: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∏–∫: "+usr.global_name+"\n> :white_check_mark: –Æ–∑–µ—Ä–Ω–µ–π–º: "+usr.username+"\n> :passport_control: –ê–π–¥–∏: "+to_string(usr.id)+"\n\n> []( "+usr.get_default_avatar_url()+")");

            string blocked;
            if(bancheck(usr.id)==true){
                blocked = "–ù–µ—Ç";
            }else{
                 blocked = "–î–∞";
            }

            dpp::embed emb = dpp::embed()
                .set_title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + usr.username)
                .set_description("> :globe_with_meridians: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∏–∫: "+usr.global_name+"\n> :white_check_mark: –Æ–∑–µ—Ä–Ω–µ–π–º: "+usr.username+"\n> :passport_control: –ê–π–¥–∏: "+to_string(usr.id)+"\n> :no_entry_sign: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: "+ blocked)
                .set_image(usr.get_avatar_url())
                .add_field(
                    "–ü–∏–Ω–≥",
                    usr.get_mention(),
                    true
                );
                if( usr.is_bot() == true){
                    emb.set_color(dpp::colors::purple);
                    emb.add_field(
                        "–Ø–≤–ª—è–µ—Ç—Å—è",
                        "–ë–æ—Ç–æ–º",
                        true
                    );
                }else{
                    emb.set_color(dpp::colors::mint);
                    emb.add_field(
                        "–Ø–≤–ª—è–µ—Ç—Å—è",
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                        true
                    );
                }
            event.reply(emb);
            cout << "about | "<< usr.username << " | " << event.command.get_issuing_user().username << endl; 
         }

         if (event.command.get_command_name()=="embed"){
            cout << "embed | ";
            event.thinking(true);
            dpp::snowflake channel = event.command.get_channel().id;
            dpp::embed cemb = dpp::embed();
            if (event.get_parameter("—Ü–≤–µ—Ç").index() != 0){
                uint32_t gget = get<long int>(event.get_parameter("—Ü–≤–µ—Ç"));
                cemb.set_color(gget);
                cout << to_string(gget) << ", ";
            }
            if (event.get_parameter("–∑–∞–≥–æ–ª–æ–≤–æ–∫").index() != 0){
                string gget = get<string>(event.get_parameter("–∑–∞–≥–æ–ª–æ–≤–æ–∫"));
                cemb.set_title(gget);
                cout << gget << ", ";
            }
            if (event.get_parameter("–æ–ø–∏—Å–∞–Ω–∏–µ").index() != 0){
                string gget = get<string>(event.get_parameter("–æ–ø–∏—Å–∞–Ω–∏–µ"));
                cemb.set_description(gget);
                cout << gget << ", ";
            }
            if (event.get_parameter("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ").index() != 0){
                string gget = get<string>(event.get_parameter("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"));
                cemb.set_image(gget);
                cout << gget << ", ";
            }
            if (event.get_parameter("–∫–∞—Ä—Ç–∏–Ω–∫–∞").index() != 0){
                string gget = get<string>(event.get_parameter("–∫–∞—Ä—Ç–∏–Ω–∫–∞"));
                cemb.set_thumbnail(gget);
                cout << gget << ", ";
            }
            if (event.get_parameter("—Å—Å—ã–ª–∫–∞").index() != 0){
                string gget = get<string>(event.get_parameter("—Å—Å—ã–ª–∫–∞"));
                cemb.set_url(gget);
                cout << gget << ", ";
            }
            if (event.get_parameter("—Ñ—É—Ç–µ—Ä-—Ç–µ–∫—Å—Ç").index() != 0 && event.get_parameter("—Ñ—É—Ç–µ—Ä-–∏–∫–æ–Ω–∫–∞").index() != 0 ){
                string gget1 = get<string>(event.get_parameter("—Ñ—É—Ç–µ—Ä-—Ç–µ–∫—Å—Ç"));
                string gget2 = get<string>(event.get_parameter("—Ñ—É—Ç–µ—Ä-–∏–∫–æ–Ω–∫–∞"));
                cemb.set_footer(
                    dpp::embed_footer()
                    .set_text(gget1)
                    .set_icon(gget2)
                );
                cout << gget1 << ", " << gget2 << ", ";
            }
            if (event.get_parameter("—Ñ–∏–ª–¥-–∑–∞–≥–æ–ª–æ–≤–æ–∫").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥-–æ–ø–∏—Å–∞–Ω–∏–µ").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥-–∏–Ω–ª–∞–π–Ω").index() != 0){
                string gget1 = get<string>(event.get_parameter("—Ñ–∏–ª–¥-–∑–∞–≥–æ–ª–æ–≤–æ–∫"));
                string gget2 = get<string>(event.get_parameter("—Ñ–∏–ª–¥-–æ–ø–∏—Å–∞–Ω–∏–µ"));
                bool gget3 = get<bool>(event.get_parameter("—Ñ–∏–ª–¥-–∏–Ω–ª–∞–π–Ω"));
                cemb.add_field(
                    gget1,
                    gget2,
                    gget3
                );
                cout << gget1 << ", " << gget2 << ", ";
            }

            if (event.get_parameter("—Ñ–∏–ª–¥2-–∑–∞–≥–æ–ª–æ–≤–æ–∫").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥2-–æ–ø–∏—Å–∞–Ω–∏–µ").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥2-–∏–Ω–ª–∞–π–Ω").index() != 0){
                string gget1 = get<string>(event.get_parameter("—Ñ–∏–ª–¥2-–∑–∞–≥–æ–ª–æ–≤–æ–∫"));
                string gget2 = get<string>(event.get_parameter("—Ñ–∏–ª–¥2-–æ–ø–∏—Å–∞–Ω–∏–µ"));
                bool gget3 = get<bool>(event.get_parameter("—Ñ–∏–ª–¥2-–∏–Ω–ª–∞–π–Ω"));
                cemb.add_field(
                    gget1,
                    gget2,
                    gget3
                );
                cout << gget1 << ", " << gget2 << ", ";
            }

            if (event.get_parameter("—Ñ–∏–ª–¥3-–∑–∞–≥–æ–ª–æ–≤–æ–∫").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥3-–æ–ø–∏—Å–∞–Ω–∏–µ").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥3-–∏–Ω–ª–∞–π–Ω").index() != 0){
                string gget1 = get<string>(event.get_parameter("—Ñ–∏–ª–¥3-–∑–∞–≥–æ–ª–æ–≤–æ–∫"));
                string gget2 = get<string>(event.get_parameter("—Ñ–∏–ª–¥3-–æ–ø–∏—Å–∞–Ω–∏–µ"));
                bool gget3 = get<bool>(event.get_parameter("—Ñ–∏–ª–¥3-–∏–Ω–ª–∞–π–Ω"));
                cemb.add_field(
                    gget1,
                    gget2,
                    gget3
                );
                cout << gget1 << ", " << gget2 << ", ";
            }

            if (event.get_parameter("—Ñ–∏–ª–¥4-–∑–∞–≥–æ–ª–æ–≤–æ–∫").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥4-–æ–ø–∏—Å–∞–Ω–∏–µ").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥4-–∏–Ω–ª–∞–π–Ω").index() != 0){
                string gget1 = get<string>(event.get_parameter("—Ñ–∏–ª–¥4-–∑–∞–≥–æ–ª–æ–≤–æ–∫"));
                string gget2 = get<string>(event.get_parameter("—Ñ–∏–ª–¥4-–æ–ø–∏—Å–∞–Ω–∏–µ"));
                bool gget3 = get<bool>(event.get_parameter("—Ñ–∏–ª–¥4-–∏–Ω–ª–∞–π–Ω"));
                cemb.add_field(
                    gget1,
                    gget2,
                    gget3
                );
                cout << gget1 << ", " << gget2 << ", ";
            }

            if (event.get_parameter("—Ñ–∏–ª–¥5-–∑–∞–≥–æ–ª–æ–≤–æ–∫").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥5-–æ–ø–∏—Å–∞–Ω–∏–µ").index() != 0 && event.get_parameter("—Ñ–∏–ª–¥5-–∏–Ω–ª–∞–π–Ω").index() != 0){
                string gget1 = get<string>(event.get_parameter("—Ñ–∏–ª–¥5-–∑–∞–≥–æ–ª–æ–≤–æ–∫"));
                string gget2 = get<string>(event.get_parameter("—Ñ–∏–ª–¥5-–æ–ø–∏—Å–∞–Ω–∏–µ"));
                bool gget3 = get<bool>(event.get_parameter("—Ñ–∏–ª–¥5-–∏–Ω–ª–∞–π–Ω"));
                cemb.add_field(
                    gget1,
                    gget2,
                    gget3
                );
                cout << gget1 << ", " << gget2  << ", ";
            }

            dpp::message msg(channel, cemb);
            bot.message_create(msg);

            event.delete_original_response();
            cout << " | " << event.command.get_issuing_user().username << endl; 
         }

    });
 
    bot.on_ready([&bot](const dpp::ready_t& event) {
        if (dpp::run_once<struct register_bot_commands>()) {
            dpp::slashcommand echo ("echo", "–í—ã–≤–æ–¥–∏—Ç –≤–∞—à —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞", bot.me.id);
            echo.add_option(
                dpp::command_option(dpp::co_string, "text", "–¢–µ–∫—Å—Ç", true)
            );

            dpp::slashcommand random ("random", "–ü–æ–ø—ã—Ç–∞–π —É–¥–∞—á—É", bot.me.id);
            random.add_option(
                dpp::command_option(dpp::co_number, "–æ—Ç", "–û—Ç –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞", true)
            );
            random.add_option(
                dpp::command_option(dpp::co_number, "–¥–æ", "–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞", true)
            );

            dpp::slashcommand calc ("calculate", "–í—ã—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä", bot.me.id);
            calc.add_option(
                dpp::command_option(dpp::co_string, "–ø—Ä–∏–º–µ—Ä", "–í–∞—à –ø—Ä–∏–º–µ—Ä", true)
            );

            dpp::slashcommand info ("info", "–ù–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", bot.me.id);

            dpp::slashcommand about ("about", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ", bot.me.id);
            about.add_option(
                dpp::command_option(dpp::co_user, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "...", true)
            );

            dpp::slashcommand embed ("embed", "–°–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥", bot.me.id);
            embed.add_option(
                dpp::command_option(dpp::co_integer, "—Ü–≤–µ—Ç", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "–∑–∞–≥–æ–ª–æ–≤–æ–∫", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "–æ–ø–∏—Å–∞–Ω–∏–µ", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "–∫–∞—Ä—Ç–∏–Ω–∫–∞", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Å—Å—ã–ª–∫–∞", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥-–∑–∞–≥–æ–ª–æ–≤–æ–∫", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥-–æ–ø–∏—Å–∞–Ω–∏–µ", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_boolean, "—Ñ–∏–ª–¥-–∏–Ω–ª–∞–π–Ω", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥2-–∑–∞–≥–æ–ª–æ–≤–æ–∫", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥2-–æ–ø–∏—Å–∞–Ω–∏–µ", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_boolean, "—Ñ–∏–ª–¥2-–∏–Ω–ª–∞–π–Ω", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥3-–∑–∞–≥–æ–ª–æ–≤–æ–∫", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥3-–æ–ø–∏—Å–∞–Ω–∏–µ", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_boolean, "—Ñ–∏–ª–¥3-–∏–Ω–ª–∞–π–Ω", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥4-–∑–∞–≥–æ–ª–æ–≤–æ–∫", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥4-–æ–ø–∏—Å–∞–Ω–∏–µ", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_boolean, "—Ñ–∏–ª–¥4-–∏–Ω–ª–∞–π–Ω", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥5-–∑–∞–≥–æ–ª–æ–≤–æ–∫", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ–∏–ª–¥5-–æ–ø–∏—Å–∞–Ω–∏–µ", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_boolean, "—Ñ–∏–ª–¥5-–∏–Ω–ª–∞–π–Ω", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ—É—Ç–µ—Ä-—Ç–µ–∫—Å—Ç", "...", false)
            );
            embed.add_option(
                dpp::command_option(dpp::co_string, "—Ñ—É—Ç–µ—Ä-–∏–∫–æ–Ω–∫–∞", "...", false)
            );
            

            
            bot.global_command_create(echo);
            bot.global_command_create(random);
            bot.global_command_create(calc);
            bot.global_command_create(info);
            bot.global_command_create(about);
            bot.global_command_create(embed);
            bot.set_presence(dpp::presence(dpp::ps_online, dpp::at_custom, "–£ –º–µ–Ω—è –ø–æ—è–≤–∏–ª—Å—è –≥–∏—Ç—Ö–∞–± (–∏—Å–ø–æ–ª—å–∑—É–π /info)"));
        }
    });
 
    bot.start(dpp::st_wait);
    return 0;
}
