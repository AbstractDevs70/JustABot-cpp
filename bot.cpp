#include"includes.h"
using namespace std;
dpp::cluster bot(BOT_TOKEN);

int main() {
    bot.on_log(dpp::utility::cout_logger());
 
    bot.on_slashcommand([](const dpp::slashcommand_t& event) {
        if (event.command.get_command_name() == "echo") {
            dpp::snowflake channel = event.command.get_channel().id;
            if (bancheck(event.command.get_issuing_user().id)==true){
                std::string testovo = std::get<std::string>(event.get_parameter("text"));
                bot.message_create(dpp::message(channel, testovo));
                cout << "–ö–æ–º–∞–Ω–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞! " << testovo << " | " << event.command.get_issuing_user().global_name << " (" << event.command.get_issuing_user().username << ", " << event.command.get_issuing_user().id << ")" << endl;
                event.thinking(true);
                event.delete_original_response();
            }else {
                event.reply(dpp::message("[ ! ] –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è"));
            }
        }

        if (event.command.get_command_name() == "random"){
            double num = get<double>(event.get_parameter("—Ä–∞–∑–º–∞—Ö"));
            long int convert = num;
            switch (bancheck(event.command.get_issuing_user().id)){
                case true:
                    event.thinking();
                    if (convert > 0){
                    srand(time(NULL));
                    long int randomi = rand() % convert;
                    event.edit_original_response("–í–∞–º –≤—ã–ø–∞–ª–æ:" + to_string( randomi ));
                    } else{
                        event.edit_original_response(dpp::message("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!"));
                    } break;
                
                case false:
                    event.reply(dpp::message("[ ! ] –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è"));
                    break;
            }
         }

         if (event.command.get_command_name()=="calculate"){
            event.thinking();
            dpp::snowflake channel = event.command.get_channel().id;
            string primer = get<string>(event.get_parameter("–ø—Ä–∏–º–µ—Ä"));
            string term_cmd = "calc '" + primer + "' > r.txt && echo $? > status.txt";
            int sz =term_cmd.length();
            char* converted = new char[sz+1];
            strcpy(converted, term_cmd.c_str());
            system(converted);

            ifstream file("r.txt");
            string answer;
            getline(file, answer);
            
            switch(bancheck(event.command.get_issuing_user().id)){
                case true:
                    if (answer != "" && answer.length() <= 2000){
                        event.edit_original_response(answer);
                    }else{
                        if(answer.length()>2000){
                            dpp::message err2(channel, "[ ! ] –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (>2000 —Å–∏–º–≤–æ–ª–æ–≤)");
                            bot.message_create(err2);
                        }else{
                            dpp::message err1(channel, "[ ! ] –ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É");
                            bot.message_create(err1);
                         }
                        event.delete_original_response();
                    }
                    
                    break;
                case false:
                    event.edit_original_response(dpp::message("[ ! ] –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è"));
                    break;
            }
         }

         if(event.command.get_command_name()=="info"){
            event.reply("> AbstractBot\n–°–æ–∑–¥–∞—Ç–µ–ª—å: AbstractDevs\n\n> –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ C++ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ D++\n\n> GitHub: \n> https://github.com/AbstractDevs70/JustABot-cpp");
         }

         if(event.command.get_command_name()=="about"){
            dpp::snowflake usrid = get<dpp::snowflake>(event.get_parameter("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"));
            dpp::user usr = event.command.get_resolved_user(usrid);
            dpp::message infor("> ## üî∞ –û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n> :globe_with_meridians: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∏–∫: "+usr.global_name+"\n> :white_check_mark: –Æ–∑–µ—Ä–Ω–µ–π–º: "+usr.username+"\n> :passport_control: –ê–π–¥–∏: "+to_string(usr.id)+"\n\n> []( "+usr.get_default_avatar_url()+")");

            dpp::embed emb = dpp::embed()
                .set_color(958376)
                .set_title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ " + usr.username)
                .set_description("> :globe_with_meridians: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∏–∫: \n> (>) "+usr.global_name+"\n> :white_check_mark: –Æ–∑–µ—Ä–Ω–µ–π–º: "+usr.username+"\n> :passport_control: –ê–π–¥–∏: "+to_string(usr.id))
                .set_thumbnail(usr.get_avatar_url())
                .add_field(
                    "–ü–∏–Ω–≥",
                    usr.get_mention(),
                    true
                );
            event.reply(emb);
         }

    });
 
    bot.on_ready([&bot](const dpp::ready_t& event) {
        if (dpp::run_once<struct register_bot_commands>()) {
            dpp::slashcommand echo ("echo", "–í—ã–≤–æ–¥–∏—Ç –≤–∞—à —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞", bot.me.id);
            echo.add_option(
                dpp::command_option(dpp::co_string, "text", "–¢–µ–∫—Å—Ç", true)
            );

            dpp::slashcommand random ("random", "–ü–æ–ø—ã—Ç–∞–π —É–¥–∞—á—É", bot.me.id);
            random.add_option(
                dpp::command_option(dpp::co_number, "—Ä–∞–∑–º–∞—Ö", "–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞", true)
            );

            dpp::slashcommand calc ("calculate", "–í—ã—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä", bot.me.id);
            calc.add_option(
                dpp::command_option(dpp::co_string, "–ø—Ä–∏–º–µ—Ä", "–í–∞—à –ø—Ä–∏–º–µ—Ä", true)
            );

            dpp::slashcommand info ("info", "–ù–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", bot.me.id);

            dpp::slashcommand about ("about", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ", bot.me.id);
            about.add_option(
                dpp::command_option(dpp::co_user, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "...", true)
            );

            
            bot.global_command_create(echo);
            bot.global_command_create(random);
            bot.global_command_create(calc);
            bot.global_command_create(info);
            bot.global_command_create(about);
            bot.set_presence(dpp::presence(dpp::ps_online, dpp::at_custom, "–£ –º–µ–Ω—è –ø–æ—è–≤–∏–ª—Å—è –≥–∏—Ç—Ö–∞–± (–∏—Å–ø–æ–ª—å–∑—É–π /info)"));
        }
    });
 
    bot.start(dpp::st_wait);
    return 0;
}
